#!/opt/puppetlabs/puppet/bin/ruby
#
# OVERVIEW
# --------
#
# `simp_rpm_helper` ensures that the Puppet module content of each
# SIMP-provided, Puppet module RPM is imported from its RPM installation
# location, `/usr/share/simp/modules/<module name>`, into a local,
# SIMP-managed, Git repository.  This local Git repository can, in turn,
# be referenced in Puppetfiles that R10K or Code Manager can use to
# populate Puppet module environments.
#
# OPERATION
# ---------
#
# `simp_rpm_helper` is automatically called by different RPM scriptlets
# (sections) of a SIMP-provided, Puppet module RPM.
#
# * When called during the `%posttrans` scriptlet of the an RPM install,
#   upgrade, or downgrade, it does the following:
#
#   - Creates `/usr/share/simp/git/`, if it does not exist
#   - Creates `/usr/share/simp/git/puppet_modules/`, if it does not exist
#   - Creates a central (bare) Git repository for the module, if it
#     does not exist
#
#     - The repository is named using the top-level 'name' field from
#       the module's `metadata.json` file:
#
#       `/usr/share/simp/git/puppet_modules/<owner>-<name>.git`
#
#   - Updates the master branch of the repository to be the contents
#     of the RPM, excluding any empty directories
#   - Adds a Git tag to the repository that matches the version number
#     in the module's `metadata.json` file, as necessary
#
#     - Overwrites the tag if it already exists but doesn't match the
#       contents of the RPM
#
# * When called during any other RPM scriptlet, it does nothing to the
#   module's repository.  However, it does log important information
#   in two cases:
#
#   - If called during the `%post` section in an install or upgrade,
#     (i.e., is called from an old, buggy, SIMP-provided, Puppet module
#     RPM), it logs a message telling the user how to fix the problem
#     by calling `simp_rpm_helper` with the correct arguments.
#   - If called during a `%preun` when the RPM status is 0, i.e., a RPM
#     uninstall (erase), it logs a message telling the user that the
#     module's local, RPM-based git repo has been preserved. (We can't
#     remove the repository, as we don't know if it is in use.)
#
# CONFIGURATION
# -------------
#
# `simp_rpm_helper` can be configured via a YAML file, which, if not
# specified in a command line option, defaults to
#     /etc/simp/adapter_conf.yaml.
#
# Below is an example of the configuration file that shows the default
# options.  If any other configuration options are specified, for example,
# those from older simp_rpm_helper versions, they will be ignored.
#
# ```yaml
#   ---
#   # Target directory
#   #   The fully qualified path to the parent directory of the
#   #   local, SIMP-managed, module Git repositories.
#   #
#   target_dir: /usr/share/simp/git/puppet_modules
#   #
#   # Work directory
#   #    The fully qualified path for a temporary work directory used
#   #    by simp_rpm_helper.
#   #
#   work_dir: /var/lib/simp-adapter
#   #
#   # Verbose
#   #   Whether to turn on debug logging
#   #
#   verbose: false
# ```
#
# OTHER DETAILS
# -------------
#
# Below are a few other details about `simp_rpm_helper` that are worth noting:
#
# * `simp_rpm_helper` no longer supports installation of files from the
#   `simp-environment` RPM.  The mechanism to install `simp-environment` files
#   into a Puppet environment or into `/var/simp/environments/<environment>`,
#   (sometimes referred to as SIMP's secondary environment) has been migrated
#   to a new command provided by SIMP's command line interface
#   (`rubygem-simp-cli` package). Execute `simp help` for more information.
# * `simp_rpm_helper` will not create a Git repository for `pupmod-simp-site`
#   package, as this package is no longer used beginning with SIMP 6.4.0.
# * The `master` branch of a local Puppet module Git repository will contain
#   a local transaction history for the RPM of that module, ***NOT*** a
#   copy of the Git history in the public repository for that project.
#   Regardless, you should always use a tagged version from a local module
#   repository.
# * If for any reason you need to debug `simp_rpm_helper` operation, this script
#   executes git operations in temporary directories, that, by default, are
#   located in `/var/lib/simp-adapter`.  These temporary directories are normally
#   purged after successful `simp_rpm_helper` operation.  Upon git-related
#   failures, however, they are preserved to aid debug.
#

require 'facter'
require 'fileutils'
require 'json'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'securerandom'
require 'yaml'

class SimpRpmHelper

  class ConfigError < StandardError ; end
  class ComponentError < StandardError ; end
  class CommandError < StandardError ; end

  PROGRAM_NAME = File.basename(__FILE__)
  VERSION = '1.0.0'

  DEFAULT_CONFIG_FILE = '/etc/simp/adapter_conf.yaml'
  DEFAULT_BARE_REPOS_DIR = '/usr/share/simp/git/puppet_modules'
  DEFAULT_WORK_DIR = '/var/lib/simp-adapter'

  # Git author/committer info used for all Git operations on
  # the created/updated module Git repo
  GIT_AUTHOR = PROGRAM_NAME
  GIT_EMAIL = ''

  # key is --rpm_section, value is an array whose index corresponds
  # to the integer representation of --rpm_status.  At each index
  # is a human understandable interpretation of that status.
  #
  # For example, RPM_STATUS_MAP['pre'][1] means that this script
  # is being called during the %pre section of an initial RPM
  # installation, whereas, RPM_STATUS_MAP['pre'][2] means that this
  # script is being called during the %pre section of an RPM upgrade.
  #
  # NOTE:  posttrans does **not** natively have a meaningful RPM status.
  #        (Always set to 0). The status below comes from custom logic
  #        in the RPM spec file template for modules that is provided by
  #        simp-rake-helpers.
  #
  RPM_STATUS_MAP = {
    'pre'       => [nil, 'install', 'upgrade'],
    'post'      => [nil, 'install', 'upgrade'],
    'posttrans' => [nil, 'install', 'upgrade'],
    'preun'     => ['erase', 'uninstall previous version during upgrade', nil],
    'postun'    => ['erase', 'uninstall previous version during upgrade', nil]
  }

  def initialize
    # simp-adapter RPM requires 'git' and 'rsync' to ensure these commands
    # are available
    @git = Facter::Core::Execution.which('git')
    @rsync = Facter::Core::Execution.which('rsync')

    # A list of modules(<author>-<name>) that should never be imported
    # into the SIMP-managed bare repos and the reason each should be skipped.
    @skip_components = {
      'simp-site' => 'This is an empty module skeleton that belongs in a site-specific repo.',
    }

    # Variables to be set during processing
    @options = OpenStruct.new # Merge of command line options, config file
                              # settings and defaults
    @module_fullname = nil    # <author>-<name> from metadata.json
    @module_version  = nil    # version from metadata.json
    @target_repo_dir = nil    # module's central (bare) repo to be created/updated
    @repo_created    = false  # whether the repo was created in this operation
    @work_repo_dir   = nil    # temporary clone of the module's central repo; only
                              # persists upon a git failure for developer debug
  end

  # Clone the central repo for the component and update its master branch with
  # the content in the RPM dir
  #
  # @raises SimpRpmHelper::CommandError if any git operation fails
  def clone_and_update
    # minimize the # of times we spew out the entire path to the git repo
    repo = @repo_created ? 'master branch' : @target_repo_dir + ' master branch'
    debug("Updating #{repo} with version #{@module_version}")

    debug("Cloning #{@target_repo_dir} to #{@work_repo_dir}")
    # start clean
    FileUtils.rm_rf(@work_repo_dir)
    FileUtils.mkdir_p(File.dirname(@work_repo_dir))
    execute("#{@git} clone file://#{@target_repo_dir} #{@work_repo_dir}",
      "Failed to clone #{@target_repo_dir}")

    Dir.chdir(@work_repo_dir) do
      debug("Updating #{@work_repo_dir} with files from #{@options.rpm_dir}")
      # clean out directory for an easy update
      entries = Dir.entries(@work_repo_dir)
      entries.delete_if { |entry| (entry == '.') or (entry == '..') or (entry == '.git') }
      FileUtils.rm_rf(entries)

      copy_cmd = %(#{@rsync} -a --force --exclude='.git' --delete)
      copy_cmd += %( --verbose) if @options.verbose
      copy_cmd += %( #{@options.rpm_dir}/ #{@work_repo_dir})
      execute(copy_cmd, "Failed to update clone at #{@work_repo_dir}")

      # double check a commit is required, because if the master branch
      # already matches what we have, the commit will fail
      results = execute("#{@git} status --porcelain")
      if results[:stdout].strip.empty?
        debug("Update of #{@target_repo_dir} master for #{@module_version} unnecessary")
      else
        debug("Updating master branch of #{@target_repo_dir}")
        # -f option is required for files in spec/fixtures that don't play
        # well with the .gitignore file (if packaged in the RPM)
        execute("#{@git} add -f --all .",
          "Failed to add updated content to #{@work_repo_dir}")

        commit_cmd = [
          "GIT_COMMITTER_NAME='#{GIT_AUTHOR}'",
          "GIT_COMMITTER_EMAIL='#{GIT_EMAIL}'",
          "#{@git} commit",
          "--author='#{GIT_AUTHOR} <#{GIT_EMAIL}>'",
          "-m 'Imported version #{@module_version}'"
        ].join(' ')
        execute(commit_cmd, "Failed to add updated content to #{@work_repo_dir}")

        execute("#{@git} push origin master",
          "Failed to push updated content to master at #{@target_repo_dir}")
      end
    end
  end

  # Create a bare repo for the module to act as a central repo
  #
  # @raises SimpRpmHelper::CommandError if the 'git --init' operation fails
  def create_central_repo
    debug("Creating central repo #{@target_repo_dir}")
    FileUtils.mkdir_p(File.dirname(@target_repo_dir))

    execute("#{@git} init --bare #{@target_repo_dir}",
      "Failed to create git repo at #{@target_repo_dir}")

    # Ideally, the Git repo we just created should be accessible to all.
    # However, we should **only** adjust permissions to the parent
    # directory tree if it matches the default.
    if File.dirname(@target_repo_dir) == DEFAULT_BARE_REPOS_DIR
      parent_path = Pathname.new(DEFAULT_BARE_REPOS_DIR)
      parent_path.ascend { |dir| FileUtils.chmod('g=rX,o=rX', dir) }
    end

    FileUtils.chmod_R('g=rX,o=rX', @target_repo_dir)
    @repo_created = true
  end

  # Executes a command
  # +cmd+:     Command to be executed
  # +fail_msg+: Prefix to add to the failure message, if the command fails.
  #
  # @returns Hash with stdout output and stderr output if the command succeeds
  # @raises SimpRpmHelper::CommandError if the command fails. The failure
  #         message will include the exit code and any stderr output.
  #
  def execute(cmd, fail_msg = nil)
    debug("Executing: #{cmd}")
    outfile = File.join('/tmp', "#{ENV['USER']}_#{SecureRandom.hex}")
    errfile = File.join('/tmp', "#{ENV['USER']}_#{SecureRandom.hex}")
    pid = spawn(cmd, :out=>outfile, :err=>errfile)

    begin
      pid,status = Process.wait2(pid)
    rescue Errno::ECHILD
      # process exited before status could be determined
    end

    exit_status = status.nil? ? nil : status.exitstatus

    if (exit_status == 0)
      return { :stdout => IO.read(outfile), :stderr => IO.read(errfile) }
    else
      stderr = IO.read(errfile).strip
      msg = fail_msg.nil? ? '' : "#{fail_msg}:\n"
      msg += indent("[ #{cmd} ] returned #{exit_status}")
      unless stderr.empty?
        msg += ":\n"
        msg += [ indent(">>>>>>>>>>>>> stderr >>>>>>>>>>>>>"),
                 indent(stderr),
                 indent("<<<<<<<<<<<<< stderr <<<<<<<<<<<<<")
               ].join("\n")
      end
      raise SimpRpmHelper::CommandError.new(msg)
    end
  ensure
    if @options.verbose
      msg = []
      msg << "Exit status: #{exit_status}"
      msg << "-------- stdout --------"
      stdout = File.read(outfile).strip
      msg << indent(stdout) unless stdout.empty?
      msg << "------------------------"
      msg << "-------- stderr --------"
      stderr = File.read(errfile).strip
      msg << indent(stderr) unless stderr.empty?
      msg << "------------------------"
      debug(msg.join("\n"))
    end
    FileUtils.rm_f([outfile, errfile])
  end

  def indent(message, indent_length=2)
    message.split("\n").map {|line| ' '*indent_length + line }.join("\n")
  end

  # Update the master branch of the module's central Git repo
  # with the contents in /usr/share/simp/modules/<module name> and
  # then create a tag for that version.
  #
  # Creates the central Git repo if it does not exist.
  #
  # @raises SimpRpmHelper::CommandError if any git operation fails
  def update_central_repo
    debug("Processing install/version change for #{@module_fullname} #{@module_version}")

    create_central_repo unless Dir.exist?(@target_repo_dir)
    clone_and_update
    tag_version
    debug('Repo update completed.')
  end

  # Extract the module full name (<author>-<name>) and version from its
  # metadata.json file
  #
  # @raises SimpRpmHelper::ComponentError if the metadata.json file does
  #         not exist or fails to parse.
  def load_module_info
    metadata_file = File.join(@options.rpm_dir, 'metadata.json')
    if File.exist?(metadata_file)
      begin
        metadata = JSON.load(File.read(metadata_file))
        @module_fullname = metadata['name']
        @module_version = metadata['version']
      rescue Exception => e
        error("Invalid file #{metadata_file}:\n#{e}")
      end
    end

    unless @module_fullname && @module_version
      msg = "Could not extract module information from #{metadata_file}"
      raise SimpRpmHelper::ComponentError.new(msg)
    end
  end


  # Parse and validate command line options
  #
  # Sets @cmd_line and initial @options settings based on the command line
  #
  # +args+: Array of command line arguments
  #
  # @raise Simp::Rpm::Helper::ConfigError on any option parsing/validation
  #        failure
  def parse_options(args)
    # save this off for warning/error messages
    @cmd_line = "#{$0} #{args.join( ' ' )}"

    all_opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{PROGRAM_NAME} -d DIR -s SECTION -S STATUS [options]"
      opts.separator ''

      opts.on(
        '-d DIR',
        '--rpm_dir DIR',
        'The fully qualified path to the directory',
        "into which the module's RPM source material",
        'is installed.'
      ) do |arg|
        @options.rpm_dir = arg.strip
        # Name of module, only.  Does not include the author.
        @options.module_name = File.basename(@options.rpm_dir)
      end

      opts.on(
        '-s SECTION',
        '--rpm_section SECTION',
        'The section of the RPM from which the',
        "script is being called: 'pre', 'preun'",
        "'post', 'postun', 'posttrans'"
      ) do |arg|
        @options.rpm_section = arg.strip
      end

      opts.on(
        '-S STATUS',
        '--rpm_status STATUS',
        'The status code passed to the RPM section.',
        "When --rpm_section is 'posttrans', should",
        "be '2' for an upgrade and '1' for an",
        'initial install.',
      ) do |arg|
        @options.rpm_status = arg.strip
      end

      opts.on(
        '-f CONFIG_FILE',
        '--config CONFIG_FILE',
        'The configuration file overriding defaults.',
        "    Default: #{DEFAULT_CONFIG_FILE}"
      ) do |arg|
        @options.config_file = arg.strip
      end

      opts.on(
        '-t DIR',
        '--target_dir DIR',
        'The fully qualified path to the parent',
        'directory of the module Git repository.',
        'This repository will be created/updated',
        'using materials found in --rpm_dir.',
        # 2 lines so help message fits into 80 characters
        '    Default:',
        "    #{DEFAULT_BARE_REPOS_DIR}"
      ) do |arg|
        @options.target_dir = arg.strip
      end

      opts.on(
        '-w DIR',
        '--work_dir DIR',
        'The fully qualified path for a temporary',
        'work directory.',
        "    Default: #{DEFAULT_WORK_DIR}"
      ) do |arg|
        @options.work_dir = arg.strip
      end

      opts.on(
        '-p',
        '--preserve',
        "DEPRECATED. This option is no longer used."
      ) do |arg|
      end

      opts.on(
        '-v',
        '--verbose',
        'Print out debug info when processing.'
      ) do
        @options.verbose = true
      end

      opts.on(
        '-h',
        '--help',
        'Help Message'
      ) do
        puts opts
        @options.help_requested = true
      end
    end

    begin
      all_opts.parse!(args)
    rescue OptionParser::ParseError => e
      raise SimpRpmHelper::ConfigError.new("#{e}\n\n#{all_opts}")
    end

    validate_options(all_opts.to_s)
  end

  # A regular installation, upgrade or downgrade for an old SIMP
  # RPM that erroneously calls this script in the %post instead
  # of the %posttrans.
  #
  # This script can't copy the module content into a corresponding
  # git repo in this case, because, if this is being called during an
  # upgrade/downgrade and the old package has files that are not in
  # the new package, the module content will be incorrect.  At this
  # point in the RPM transaction, the source module content to be
  # copied still contains the files that will be removed when the
  # transaction completes.
  #
  # @raises SimpRpmHelper::ComponentError with a message explaining how to
  #         manually execute this script to affect the copy into the
  #         git repo
  def handle_post_error
    debug("Processing install/version change for #{@module_fullname} #{@module_version}")
    msg = "#{@target_repo_dir} could not be updated to #{@module_version}\n\n"
    msg += "          Manually execute the following to fix:\n\n"
    msg += "#{@cmd_line.gsub("=post", "=posttrans")}\n\n"
    raise SimpRpmHelper::ComponentError.new(msg)
  end

  # Load and validate configuration from a config file and then
  # set defaults for options not specified on the command line
  #
  # Updates @options
  #
  # @raises SimpRpmHelper::ConfigError if a configuration file is specified
  #    on the command line and it either does not exist or fails to parse.
  #    Otherwise, raises if the default configuration file does exist but
  #    fails to parse.
  def process_config_file
    # defaults
    config = {
      'target_dir' => DEFAULT_BARE_REPOS_DIR,
      'work_dir'   => DEFAULT_WORK_DIR,
      'verbose'    => false
    }

    if @options.config_file
      file_expected = true
    else
      file_expected = false
      @options.config_file = DEFAULT_CONFIG_FILE
    end

    if File.exist?(@options.config_file)
      begin
        system_config = YAML.load_file(@options.config_file)
        if system_config
          config.merge!(system_config)
        end
      rescue Exception => e
        msg = "Config file '#{@options.config_file}' could not be processed:\n#{e}"
        raise SimpRpmHelper::ConfigError.new(msg)
      end
    elsif file_expected
      msg = "Config file '#{@options.config_file}' does not exist"
      raise SimpRpmHelper::ConfigError.new(msg)
    end

    if @options.target_dir.nil?
      unless config['target_dir'][0].chr == '/'
        msg = "'target_dir' in '#{@options.config_file}' must be an absolute path"
        raise SimpRpmHelper::ConfigError.new(msg)
      end

      # clean up any relative sub-paths for tidier logging
      @options.target_dir = File.expand_path(config['target_dir'].strip)
    end

    if @options.work_dir.nil?
      unless config['work_dir'][0].chr == '/'
        msg = "'work_dir' in '#{@options.config_file}' must be an absolute path"
        raise SimpRpmHelper::ConfigError.new(msg)
      end

      # clean up any relative sub-paths for tidier logging
      @options.work_dir = File.expand_path(config['work_dir'].strip)
    end

    @options.verbose = config['verbose'] if @options.verbose.nil?

    debug("Running with config=#{@options.to_h}")
  end

  # Returns true if the component does not require a bare repo update
  def skip_required?
    skip = false
    if @skip_components.keys.include?(@module_fullname)
      skip = true
      if (['posttrans', 'post'].include?(@options.rpm_section) &&
        ['1', '2'].include?(@options.rpm_status)
      )
        debug("Skipping repo update for #{@module_fullname}: #{@skip_components[@options.module_name]}")
      else
        debug(noop_msg)
      end
    end
    skip
  end

  # Tags the modules central Git repository with the latest imported version
  #
  # @raises SimpRpmHelper::CommandError if any git operation fails
  def tag_version
    Dir.chdir(@work_repo_dir) do
      # See if a tag is required
      results = execute("#{@git} tag -l")
      if results[:stdout].match(/^#{Regexp.escape(@module_version)}$/m)
        # make sure tag content is correct
        results = execute("#{@git} diff --name-only tags/#{@module_version} .")
        if results[:stdout].strip.empty?
          tag_required = false
        else
          debug("Previous tag for version #{@module_version} is incorrect and will be overwritten.")
          tag_required = true
        end
      else
        tag_required = true
      end

      if tag_required
        # We're force pushing to handle the case in which the tag exists with
        # different content.  If the user munged a SIMP-generated tag, the git
        # reference for the munged version should still be available on the
        # branch the version was created from.  This is true even for the
        # master branch, as we never force push to master.
        debug("Tagging version #{@module_version}")
        tag_msg = "Version #{@module_version} tagged by #{PROGRAM_NAME} #{VERSION}"
        tag_cmd = [
          "GIT_COMMITTER_NAME='#{GIT_AUTHOR}'",
          "GIT_COMMITTER_EMAIL='#{GIT_EMAIL}'",
          "#{@git} tag -a -f",
          @module_version,
          "-m '#{tag_msg}'"
        ].join(' ')
        execute(tag_cmd, "Failed to create annotated tag in #{@work_repo_dir}")

        execute("#{@git} push origin #{@module_version} -f",
          "Failed to push annotated tag to #{@target_repo_dir}")
      else
        debug("Valid #{@module_version} tag exists")
      end
    end

    # Success!  No need to save our temporary work dir.
    FileUtils.rm_rf(@work_repo_dir)
  end

  # Process an RPM uninstall (erase).
  #
  # Intentionally do **not** do anything to the module's repo, as we can't be
  # assured it is not being used.
  # TODO Have a configuration option that allows the (informed) user to remove
  #      the module's git repo on RPM uninstall?
  def handle_uninstall
    debug("Processing uninstall of #{@module_fullname}")
    if Dir.exist?(@target_repo_dir)
      msg = [
        "'#{@module_fullname}' git repo has been preserved at",
        indent(@target_repo_dir),
        '',
        indent('>>> Please remove it manually if you no longer need it. <<<'),
      ].join("\n")
      info(msg)
    end

    FileUtils.rm_rf(@work_repo_dir)
  end

  # Load configuration and execute the operation requested
  #
  # +args+: Array of command line arguments
  #
  # @returns 0 upon success
  # @returns a non-0 value upon any failure
  def run(args)
    parse_options(args)
    return 0 if @options.help_requested

    unless ['posttrans', 'post', 'preun'].include?(@options.rpm_section)
      debug(noop_msg)
      return 0
    end

    process_config_file
    load_module_info
    return 0 if skip_required?

    # bare repo directories, by convention, end in .git
    @target_repo_dir = File.join(@options.target_dir, @module_fullname + '.git')
    @work_repo_dir = File.join(@options.work_dir, @module_fullname)

    case @options.rpm_section
    when 'posttrans'
      if ['1', '2'].include?(@options.rpm_status)
        # A regular installation or version change (upgrade/downgrade)
        update_central_repo
      else
        debug(noop_msg)
      end
    when 'post'
      # A regular installation or version change (upgrade/downgrade) for
      # an old SIMP RPM that **erroneously** calls this script in the
      # %post instead of the %posttrans.
      handle_post_error
    when 'preun'
      if @options.rpm_status == '0'
        # A regular uninstall (erase)
        handle_uninstall
      else
        debug(noop_msg)
      end
    end

    return 0
  rescue ConfigError, ComponentError => e
    error(e)
    return 1
  rescue CommandError => e
    msg = [ e.message ]
    unless @options.verbose
      msg << ''
      msg << '          Execute the following to debug the problem: '
      msg << ''
      msg << "#{@cmd_line} -v"
      msg << ''
    end
    error(msg.join("\n"))
    return 2
  rescue Exception => e
    msg = [ e.message ]
    e.backtrace.first(10).each { |l| msg << " #{l}" }
    error(msg.join("\n"))
    return 3
  end

  # @returns a 'no operation' message for the configured options
  def noop_msg
    detail = RPM_STATUS_MAP[@options.rpm_section][@options.rpm_status.to_i]
    if detail.nil?
      detail = "#{@options.rpm_section} with #{@options.rpm_status} RPM status"
    end
    name = @module_fullname.nil? ? @options.rpm_name : @module_fullname
    "No operation required for #{name} '#{@options.rpm_section}' during #{detail}"
  end

  # Command line option validation
  # @raises SimpRpmHelper::ConfigError if any required option is missing or
  #         any option fails validation
  def validate_options(usage)
    return if @options.help_requested

    unless @options.rpm_dir
      raise SimpRpmHelper::ConfigError.new("'rpm_dir' is required\n\n#{usage}")
    end

    unless @options.rpm_dir[0].chr == '/'
      msg = "'rpm_dir' must be an absolute path"
      raise SimpRpmHelper::ConfigError.new(msg)
    end
    # clean up any relative sub-paths for tidier logging
    @options.rpm_dir = File.expand_path(@options.rpm_dir)

    unless @options.rpm_status
      raise SimpRpmHelper::ConfigError.new("'rpm_status' is required\n\n#{usage}")
    end

    unless @options.rpm_section
      raise SimpRpmHelper::ConfigError.new("'rpm_section' is required\n\n#{usage}")
    end

    valid_rpm_sections = ['pre', 'post', 'preun', 'postun', 'posttrans']
    unless valid_rpm_sections.include?(@options.rpm_section)
      msg = "'rpm_section' must be one of '#{valid_rpm_sections.join("', '")}'\n\n#{usage}"
      raise SimpRpmHelper::ConfigError.new(msg)
    end

    if (@options.rpm_section == 'posttrans') || (@options.rpm_section == 'preun')
      unless File.directory?(@options.rpm_dir)
        msg = "Could not find 'rpm_dir': '#{@options.rpm_dir}'"
        raise SimpRpmHelper::ConfigError.new(msg)
      end
    end

    unless @options.rpm_status =~ /^\d+$/
      msg = "'rpm_status' must be an integer: '#{@options.rpm_status}'"
      raise SimpRpmHelper::ConfigError.new(msg)
    end

    if @options.target_dir
      # For backward compatibility, we don't actually enforce the
      # fully qualified path.  However, we still want to clean up
      # any relative sub-paths for tidier logging.
      @options.target_dir = File.expand_path(@options.target_dir)
    end

    if @options.work_dir
      unless @options.work_dir.chr == '/'
        msg = "'work_dir' must be an absolute path"
        raise SimpRpmHelper::ConfigError.new(msg)
      end

      # clean up any relative sub-paths for tidier logging
      @options.work_dir = File.expand_path(@options.work_dir)
    end

  end


  ##############################################################################
  # Log helpers

  # +msg+: message string
  def debug(msg)
    return unless @options.verbose
    msg.split("\n").each do |line|
      puts "#{PROGRAM_NAME} DEBUG: #{line}"
    end
  end

  # +msg+: message string
  def info(msg)
    # When these messages get written out in an RPM operation, name of program
    # is helpful to end user
    puts "#{PROGRAM_NAME} INFO: #{msg}"
  end

  # +msg+: message string
  def error(msg)
    $stderr.puts "#{PROGRAM_NAME} ERROR: #{msg}"
  end

  # +msg+: message string
  def warn(msg)
    $stderr.puts "#{PROGRAM_NAME} WARN: #{msg}"
  end
end

################################################################################

if __FILE__ == $0
  helper = SimpRpmHelper.new
  exit helper.run(ARGV)
end

